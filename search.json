[{"path":[]},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"location","dir":"Articles","previous_headings":"configure_flare.yml","what":"location:","title":"FLAREr configurations","text":"site_id: Four letter code lake name: name lake latitude: latitude degrees north longitude: longitude degrees east","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"da_setup","dir":"Articles","previous_headings":"configure_flare.yml","what":"da_setup:","title":"FLAREr configurations","text":"da_method: code data assimilation method (enkf) par_fit_method: method parameter fitting inflate uses parameter inflat_pars par configuration increase variance parameters data assimilated. method used Thomas et al. 2023 perturb adds normal random noise parameter based parameter perturb_par par configuration. perturb_const Data assimilation fits mean parameter distribution uses specified variance parameters defined parameter perturb_par par configuration ensemble_size: number ensemble members localization_distance: distance meters covariances enkf covariance metric deminished. distance governs exponential decay covariance strength. no_negative_states: Force non-temperature states postive (TRUE FALSE) assimilate_first_step: Assimilate data provided initial conditions. Set FALSE initial conditions already data assimilated. (TRUE FALSE) use_obs_constraint: Assimilate observations (TRUE FALSE) obs_filename: file name targets file. required located lake_directory/targets/{site_id} directory.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"model_settings","dir":"Articles","previous_headings":"configure_flare.yml","what":"model_settings:","title":"FLAREr configurations","text":"ncore: number process cores use model_name: name process model (glm glm_aed) base_GLM_nml: name base GLM namelist. required lake_directory/configuraton/{config_set} directory. modeled_depths: vector depths (m) simulated. Value top layer. par_config_file: name parameter configuration csv. required lake_directory/configuraton/{config_set} directory. parameter_calibration_config.csv obs_config_file: name observation configuration csv. required lake_directory/configuraton/{config_set} directory. states_config_file: name state configuration csv. required lake_directory/configuraton/{config_set} directory. depth_model_sd_config_file: Optional state configuration file specifies process uncertainty depends depth. used required lake_directory/configuraton/{config_set} directory.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"default_init","dir":"Articles","previous_headings":"configure_flare.yml","what":"default_init:","title":"FLAREr configurations","text":"lake_depth_init: initial lake depth (meters) default_temp_init: vector initial temperature profile default_temp_init_depths: vector depths initial temperature profile the_sals_init: vector initial salinty values default_snow_thickness_init: initial snow thickness (cm) default_white_ice_thickness_init: initial white ice thickness  default_blue_ice_thickness_init: initial blue ice thickness (cm) lake_depth: initial lake depth (meters) temp: vector initial temperature profile temp_depths: vector depths initial temperature profile salinity: initial salinty value (g/kg) snow_thickness: initial snow thickness (m) white_ice_thickness: initial white ice thickness (m) blue_ice_thickness: initial blue ice thickness (m)","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"met","dir":"Articles","previous_headings":"configure_flare.yml","what":"met:","title":"FLAREr configurations","text":"use_forecasted_met: Use forecast met forecasting (TRUE FALSE) use_met_s3: access met data s3 bucket (TRUE FALSE) use_observed_met: use observed met non-forecast time steps (TRUE FALSE) observed_filename: name meterology targets file name use_ler_vars: use LER standardized met names (TRUE FALSE) local_directory: directory meterology forcasts saved using s3 access. Relative lake_directory.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"inflow","dir":"Articles","previous_headings":"configure_flare.yml","what":"inflow:","title":"FLAREr configurations","text":"include_inflow: Include inflows simulations (TRUE FALSE) use_forecasted_inflow: Use forecast met forecasting (TRUE FALSE) forecast_inflow_model: name inflow model observed_filename: name inflow targets file name use_ler_vars: use LER standardized met names (TRUE FALSE) local_directory: directory inflow forcasts saved using s3 access. Relative lake_directory.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"uncertainty","dir":"Articles","previous_headings":"configure_flare.yml","what":"uncertainty:","title":"FLAREr configurations","text":"observation: Include uncertainty observations (TRUE FALSE) process: Include normal random noise added states forecast (TRUE FALSE) weather: Include multiple weather forecast ensemble members (TRUE FALSE) initial_condition: Include uncertainty states initiation forecast (TRUE FALSE) parameter: Include uncertainty parameters forecast (TRUE FALSE) inflow_process: Include uncertainty inflow forecast (TRUE FALSE)","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"output_settings","dir":"Articles","previous_headings":"configure_flare.yml","what":"output_settings:","title":"FLAREr configurations","text":"diagnostics_names: names non-state GLM variables save evaluate_past: score past forecasts reference_datetimes within forecast horizon (TRUE FALSE) variables_in_scores: Variable types include scores. Options state, parameter, /diagnostic","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"s3","dir":"Articles","previous_headings":"configure_flare.yml","what":"s3","title":"FLAREr configurations","text":"endpoint: bucket: endpoint: bucket: endpoint: bucket: endpoint: bucket: endpoint: bucket: endpoint: bucket: endpoint: bucket:","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"parameter_calibration_config-csv","dir":"Articles","previous_headings":"","what":"parameter_calibration_config.csv","title":"FLAREr configurations","text":"par_names: vector GLM names parameter values estimated par_names_save: vector names parameter values estimated desired output plots par_file: vector nml csv file names contains parameter estimated par_init_mean: vector initial mean value parameters par_init_lowerbound: vector lower bound initial uniform distribution parameters par_init_upperbound: vector upper bound initial uniform distribution parameters par_lowerbound: vector lower bounds parameter can par_upperbound: vector upper bounds parameter can inflat_pars: variance inflation factor applied parameter component ensemble. Value greater 1. perturb_par: standard deviation normally distributed random noise added parameters par_units: Units parameter plotting","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"states_config-csv","dir":"Articles","previous_headings":"","what":"states_config.csv","title":"FLAREr configurations","text":"state_names: name states. initial_conditions: initial conditions state observations available initialize. Assumes initial conditions constant depths, except temperature uses default_temp_init variable configure_flare.R set depth profile observations lacking model_sd: standard deviation process error tate initial_model_sd: standard deviation initial distribution state states_to_obs_mapping: multiplier state convert observation. cases 1. However, case phytoplankton, model predicts mmol/m3 biomass observations ug/L chla. Therefore multiplier biomass chla conversion NA required matching observations Name column must match observation name NA required matching observations Name column must match observation name init_obs_name: name observation used initialize state observation init_obs_mapping: multiplier observation used initialize. example, using combined DOC measurement initialize two DOC states, need provide proportion observation assigned state.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"depth_model_sd-csv","dir":"Articles","previous_headings":"states_config.csv","what":"depth_model_sd.csv:","title":"FLAREr configurations","text":"depth: depth (m) column name = variable name states depth varying process uncertainty. Values sd depth. sd interpolated extrapolated beyond depths provided.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-config-vignette.html","id":"observations_config-csv","dir":"Articles","previous_headings":"","what":"observations_config.csv","title":"FLAREr configurations","text":"state_names_obs: names states observations obs_sd: standard deviation observation uncertainty target_variable: name variable data file used observed state.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-drivers-vignette.html","id":"placeholder-for-description-of-drivers","dir":"Articles","previous_headings":"","what":"Placeholder for description of drivers","title":"FLAREr driver inputs","text":"need describe parquet, directory, column names, etc.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"FLAREr example","text":"document serves users guide tutorial FLARE (Forecasting Lake Reservoir Ecosystems) system (Thomas et al.Â 2020). FLARE generates forecasts forecast uncertainty water temperature water quality 1 35-dau ahead time horizon multiple depths lake reservoir. uses data assimilation update initial starting point forecast model parameters based real-time statistical comparisons observations. developed, tested, evaluated Falling Creek Reservoir Vinton,VA (Thomas et al.Â 2020) National Ecological Observatory Network lakes (Thomas et al.Â 2023 FLARE set R scripts Generating inputs configuration files required General Lake Model (GLM) Applying data assimilation GLM Processing archiving forecast output Visualizing forecast output FLARE uses 1-D General Lake Model (Hipsey et al.Â 2019) mechanistic process model predicts hydrodynamics lake reservoir. forecasts water quality, uses GLM Aquatic Ecosystem Dynamics library. binaries GLM GLM-AED included FLARE code available GitHub. FLARE requires GLM version 3.3 higher. information GLM can found : GLM 3.0.0 manuscript GLM GitHub GLM users guide FLARE development supported grants National Science Foundation (CNS-1737424, DEB-1753639, EF-1702506, DBI-1933016, DEB-1926050)","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"FLAREr example","text":"RStudio FLAREr R package FLAREr dependencies","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"set-up","dir":"Articles","previous_headings":"","what":"1: Set up","title":"FLAREr example","text":"First, install FLAREr package GitHub. required packages also downloaded. Second, create directory working directory FLARE run","code":"remotes::install_github(\"flare-forecast/FLAREr\") lake_directory <-  tempdir() dir.create(file.path(lake_directory, \"configuration/default\"), recursive = TRUE) dir.create(file.path(lake_directory, \"targets\")) # For QAQC data dir.create(file.path(lake_directory, \"drivers\")) # Weather and inflow forecasts"},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"configuration-files","dir":"Articles","previous_headings":"","what":"2: Configuration files","title":"FLAREr example","text":"First, FLAREr requires two configuration yaml files. code copies examples FLAREr package. Second, FLAREr requires set configuration CSV files. CSV files used define states simulated parameters calibrated. code copies examples FLAREr package Third, FLAREr requires GLM specific configurations files. applications require water temperature, GLM namelist file needed. Applications require water quality variables require additional namelist files associated AED model.","code":"file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"configure_flare.yml\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"configure_flare.yml\")) #> [1] TRUE file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"configure_run.yml\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"configure_run.yml\")) #> [1] TRUE file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"parameter_calibration_config.csv\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"parameter_calibration_config.csv\")) #> [1] TRUE file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"states_config.csv\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"states_config.csv\")) #> [1] TRUE file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"depth_model_sd.csv\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"depth_model_sd.csv\")) #> [1] TRUE file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"observations_config.csv\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"observations_config.csv\")) #> [1] TRUE file.copy(system.file(\"extdata\", \"configuration\", \"default\", \"glm3.nml\", package = \"FLAREr\"), file.path(lake_directory, \"configuration\", \"default\", \"glm3.nml\")) #> [1] TRUE"},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"observation-and-driver-files","dir":"Articles","previous_headings":"","what":"3: Observation and driver files","title":"FLAREr example","text":"Since FLAREr package general application, scripts download process observation drivers included package. Therefore application FLARE lake require set additional scripts specific data formats lakes. example includes files application FCR. First, FLAREr requires observation file specific name (observations_postQAQC_long.csv) format.","code":"file.copy(from = system.file(\"extdata/targets\", package = \"FLAREr\"), to = lake_directory, recursive = TRUE) #> [1] TRUE file.copy(from = system.file(\"extdata/drivers\", package = \"FLAREr\"), to = lake_directory, recursive = TRUE) #> [1] TRUE head(read_csv(file.path(lake_directory,\"targets/fcre/fcre-targets-insitu.csv\"), show_col_types = FALSE)) #> # A tibble: 6 Ã 5 #>   datetime            site_id depth observation variable    #>   <dttm>              <chr>   <dbl>       <dbl> <chr>       #> 1 2022-09-02 00:00:00 fcre        0        27.0 temperature #> 2 2022-09-03 00:00:00 fcre        0        26.5 temperature #> 3 2022-09-04 00:00:00 fcre        0        26.2 temperature #> 4 2022-09-05 00:00:00 fcre        0        25.8 temperature #> 5 2022-09-06 00:00:00 fcre        0        25.2 temperature #> 6 2022-09-07 00:00:00 fcre        0        26.7 temperature"},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"configure-simulation-glm","dir":"Articles","previous_headings":"","what":"2: Configure simulation (GLM)","title":"FLAREr example","text":"configuration functions spread across files. files described detail glm3.nml configure_flare.yml configure_run.yml states_config.csv observations_config.csv parameter_calibration_config.csv depth_model_sd.csv","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"configure_run-yml","dir":"Articles","previous_headings":"2: Configure simulation (GLM)","what":"configure_run.yml","title":"FLAREr example","text":"file configuration file define specific timing run. restart_file: full path file want use initial conditions simulation. set NA simulation continuation previous simulation. sim_name: string name simulation. appear output file names forecast_days: forecast horizon. max 16 days. Set 0if data assimilation observed drivers. 00:00:00 UTC 06:00:00 UTC 12:00:00 UTC 18:00:00 UTC forecast_start_datetime: date want forecasting start simulation. Uses YYYY-MM-DD mm:hh:ss format (e.g., â2019-09-20 00:00:00â). difference start_time forecast_start_datetime determines many days data assimilation occur using observed drivers handing forecasted drivers assimilating data configure_flare: name FLARE configuration file located configuration/[config_set] directory (configure_flare.yml) configure_obs: name optional observation processing configuration file located configuration/[config_set] directory (configure_obs.yml) use_s3: use s3 cloud storage saving forecast, scores, restart files.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"glm3-nml","dir":"Articles","previous_headings":"2: Configure simulation (GLM)","what":"glm3.nml","title":"FLAREr example","text":"glm3.nml configuration file required GLM. can configured run GLM GLM + AED. version already configured run GLM FCR need modify example simulation.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"configure_flare-yml","dir":"Articles","previous_headings":"2: Configure simulation (GLM)","what":"configure_flare.yml","title":"FLAREr example","text":"configure_flare.yml bulk configurations FLARE set reuse. end document describes configurations configure_flare.yml. Later tutorial, modify key configurations configure_flare.yml","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"states_config-csv","dir":"Articles","previous_headings":"2: Configure simulation (GLM)","what":"states_config.csv","title":"FLAREr example","text":"Needs configuration/[config_set]","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"observations_config-csv","dir":"Articles","previous_headings":"2: Configure simulation (GLM)","what":"observations_config.csv","title":"FLAREr example","text":"Needs configuration/[config_set]","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"parameter_calibration_config-csv","dir":"Articles","previous_headings":"2: Configure simulation (GLM)","what":"parameter_calibration_config.csv","title":"FLAREr example","text":"Needs configuration/[config_set]","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"run-your-glm-example-simulation","dir":"Articles","previous_headings":"","what":"3: Run your GLM example simulation","title":"FLAREr example","text":"Read configuration files following reads configuration files overwrites directory locations based lake_directory directories provided . practice specific directories configure file overwrite . Visualizing output","code":"next_restart <- FLAREr::run_flare(lake_directory = lake_directory,configure_run_file = \"configure_run.yml\", config_set_name = \"default\") #>      Running forecast that starts on: 2022-09-28 00:00:00 #> Registered S3 method overwritten by 'quantmod': #>   method            from #>   as.zoo.data.frame zoo #> Using GLM Version 3.3.0a9 #> Running time step 1/20 : 2022-09-28 00:00 - 2022-09-29 00:00 [2023-07-19 15:53:39.831188] #> zone1temp: mean 11.0835 sd 1 #> zone2temp: mean 14.1078 sd 1 #> lw_factor: mean 1.014 sd 0.02 #> Running time step 2/20 : 2022-09-29 00:00 - 2022-09-30 00:00 [2023-07-19 15:53:44.636081] #> zone1temp: mean 11.4355 sd 1 #> zone2temp: mean 14.3982 sd 1 #> lw_factor: mean 1.0153 sd 0.02 #> Running time step 3/20 : 2022-09-30 00:00 - 2022-10-01 00:00 [2023-07-19 15:53:49.275183] #> zone1temp: mean 11.5912 sd 1 #> zone2temp: mean 14.1471 sd 1 #> lw_factor: mean 1.015 sd 0.02 #> Running time step 4/20 : 2022-10-01 00:00 - 2022-10-02 00:00 [2023-07-19 15:53:53.810782] #> zone1temp: mean 14.3844 sd 1 #> zone2temp: mean 14.8046 sd 1 #> lw_factor: mean 0.9922 sd 0.02 #> Running time step 5/20 : 2022-10-02 00:00 - 2022-10-03 00:00 [2023-07-19 15:53:58.334306] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 6/20 : 2022-10-03 00:00 - 2022-10-04 00:00 [2023-07-19 15:54:02.930845] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 7/20 : 2022-10-04 00:00 - 2022-10-05 00:00 [2023-07-19 15:54:07.43934] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 8/20 : 2022-10-05 00:00 - 2022-10-06 00:00 [2023-07-19 15:54:11.96163] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 9/20 : 2022-10-06 00:00 - 2022-10-07 00:00 [2023-07-19 15:54:16.547049] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 10/20 : 2022-10-07 00:00 - 2022-10-08 00:00 [2023-07-19 15:54:21.033136] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 11/20 : 2022-10-08 00:00 - 2022-10-09 00:00 [2023-07-19 15:54:25.556968] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 12/20 : 2022-10-09 00:00 - 2022-10-10 00:00 [2023-07-19 15:54:30.028373] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 13/20 : 2022-10-10 00:00 - 2022-10-11 00:00 [2023-07-19 15:54:34.511129] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 14/20 : 2022-10-11 00:00 - 2022-10-12 00:00 [2023-07-19 15:54:39.142829] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 15/20 : 2022-10-12 00:00 - 2022-10-13 00:00 [2023-07-19 15:54:43.623121] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 16/20 : 2022-10-13 00:00 - 2022-10-14 00:00 [2023-07-19 15:54:48.145403] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 17/20 : 2022-10-14 00:00 - 2022-10-15 00:00 [2023-07-19 15:54:52.661033] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 18/20 : 2022-10-15 00:00 - 2022-10-16 00:00 [2023-07-19 15:54:57.177992] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 19/20 : 2022-10-16 00:00 - 2022-10-17 00:00 [2023-07-19 15:55:01.669506] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Running time step 20/20 : 2022-10-17 00:00 - 2022-10-18 00:00 [2023-07-19 15:55:06.157258] #> zone1temp: mean 15.125 sd 1 #> zone2temp: mean 14.5865 sd 1 #> lw_factor: mean 0.9837 sd 0.02 #> Writing netcdf #> Writing arrow forecast #> starting writing dataset #> ending writing dataset #> Scoring forecasts #> Warning: There was 1 warning in `dplyr::mutate()`. #> â¹ In argument: `depth = as.numeric(str_split_fixed(site_id, \"-\", 2)[, 2])`. #> Caused by warning: #> ! NAs introduced by coercion #> Generating plot #> temp #> Warning: Removed 567 rows containing missing values (`geom_point()`). #> salt #> Warning: Removed 798 rows containing missing values (`geom_point()`). #> zone1temp #> zone2temp #> lw_factor #> extc #> Warning: Removed 1 row containing missing values (`geom_line()`). #> secchi #> Warning: Removed 1 row containing missing values (`geom_line()`). #> Warning: Removed 18 rows containing missing values (`geom_point()`). #> Putting forecast #> successfully generated flare forecats for: fcre-2022-10-02-test.nc df <- arrow::open_dataset(file.path(lake_directory,\"forecasts/parquet\")) |> collect() head(df) #> # A tibble: 6 Ã 12 #>   datetime            pubDate             depth family   parameter variable    #>   <dttm>              <dttm>              <dbl> <chr>        <int> <chr>       #> 1 2022-09-28 00:00:00 2023-07-19 15:55:10     0 ensemble         1 temperature #> 2 2022-09-28 00:00:00 2023-07-19 15:55:10     0 ensemble         2 temperature #> 3 2022-09-28 00:00:00 2023-07-19 15:55:10     0 ensemble         3 temperature #> 4 2022-09-28 00:00:00 2023-07-19 15:55:10     0 ensemble         4 temperature #> 5 2022-09-28 00:00:00 2023-07-19 15:55:10     0 ensemble         5 temperature #> 6 2022-09-28 00:00:00 2023-07-19 15:55:10     0 ensemble         6 temperature #> # â¹ 6 more variables: prediction <dbl>, forecast <dbl>, variable_type <chr>, #> #   site_id <chr>, model_id <chr>, reference_datetime <chr> df |>    filter(variable == \"temperature\",          depth == 1) |>    ggplot(aes(x = datetime, y = prediction, group = parameter)) +   geom_line() +   geom_vline(aes(xintercept = as_datetime(reference_datetime))) +   labs(title = \"1 m water temperature forecast\") df <- arrow::open_dataset(file.path(lake_directory,\"scores/parquet\")) |> collect() head(df) #> # A tibble: 6 Ã 18 #>   datetime            family variable observation    crps   logs    mean  median #>   <dttm>              <chr>  <chr>          <dbl>   <dbl>  <dbl>   <dbl>   <dbl> #> 1 2022-09-28 00:00:00 sample extc            NA   NA      NA     NA      NA      #> 2 2022-09-28 00:00:00 sample salt            NA   NA      NA      0.100   0.100  #> 3 2022-09-28 00:00:00 sample temperaâ¦        20.5  0.432   1.47  21.0    21.1    #> 4 2022-09-29 00:00:00 sample extc            NA   NA      NA      0.87    0.87   #> 5 2022-09-29 00:00:00 sample salt            NA   NA      NA      0.0994  0.0993 #> 6 2022-09-29 00:00:00 sample temperaâ¦        19.6  0.0329 -0.956 19.6    19.6    #> # â¹ 10 more variables: sd <dbl>, quantile97.5 <dbl>, quantile02.5 <dbl>, #> #   quantile90 <dbl>, quantile10 <dbl>, horizon <dbl>, depth <dbl>, #> #   site_id <chr>, model_id <chr>, reference_datetime <chr> df |>    filter(variable == \"temperature\",          depth == 1) |>    ggplot(aes(x = datetime)) +   geom_ribbon(aes(ymin = quantile10, ymax = quantile90), alpha = 0.5, fill = \"lightblue\") +   geom_line(aes(y = median)) +   geom_point(aes(y = observation), color = \"red\") +   geom_vline(aes(xintercept = as_datetime(reference_datetime))) +   labs(title = \"1 m water temperature forecast\")"},{"path":[]},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"turning-off-data-assimilation","dir":"Articles","previous_headings":"6: Modifying FLARE","what":"Turning off data assimilation","title":"FLAREr example","text":"configure_flare.yml can change da_method ânoneâ","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"removing-parameter-estimation","dir":"Articles","previous_headings":"6: Modifying FLARE","what":"Removing parameter estimation","title":"FLAREr example","text":"Set par_config_file = .na configure_flare.yml","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"increasing-observational-uncertainty","dir":"Articles","previous_headings":"6: Modifying FLARE","what":"Increasing observational uncertainty","title":"FLAREr example","text":"second modification increase observational uncertainty. observations_config.csv set obs_sd = 1.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"changing-the-ensemble-size","dir":"Articles","previous_headings":"6: Modifying FLARE","what":"Changing the ensemble size","title":"FLAREr example","text":"variable ensemble_size allows adjust size ensemble.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-example-vignette.html","id":"changing-the-number-of-depths-simulated","dir":"Articles","previous_headings":"6: Modifying FLARE","what":"Changing the number of depths simulated","title":"FLAREr example","text":"variable modeled_depths allows adjust depths FLARE simulates. used restart file, model_depths required equal model_depths restart file.","code":""},{"path":"http://flare-forecast.org/FLAREr/articles/flare-workflow-vignette.html","id":"base-for-custom-workflow","dir":"Articles","previous_headings":"","what":"Base for custom workflow","title":"Common Workflow","text":"workflow example combines functions FLAREr generate forecast. can modify example customize implimentation FLARE Flare","code":"tmp <- tempdir() file.copy(system.file(\"extdata\", package = \"FLAREr\"), tmp, recursive = TRUE) lake_directory <- file.path(tmp, \"extdata\") configure_run_file <- \"configure_run.yml\" config_set_name <- \"default\" FLAREr::ignore_sigpipe()  config <- FLAREr::set_configuration(configure_run_file, lake_directory,                                      config_set_name = config_set_name)  config <- FLAREr::get_restart_file(config, lake_directory)  message(paste0(\"     Running forecast that starts on: \", config$run_config$start_datetime))  if(!is.null(config$model_settings$par_config_file)){   if(!is.na(config$model_settings$par_config_file)){     pars_config <- readr::read_csv(file.path(config$file_path$configuration_directory,                                              config$model_settings$par_config_file),                                     col_types = readr::cols())   } }    obs_config <- readr::read_csv(file.path(config$file_path$configuration_directory,                                          config$model_settings$obs_config_file),                                col_types = readr::cols()) states_config <- readr::read_csv(file.path(config$file_path$configuration_directory,                                            config$model_settings$states_config_file),                                   col_types = readr::cols())  if(!config$met$use_observed_met){   obs_met_file = NULL }else{   obs_met_file <- file.path(config$file_path$qaqc_data_directory,                              config$met$observed_filename) }  met_start_datetime <- lubridate::as_datetime(config$run_config$start_datetime) met_forecast_start_datetime <- lubridate::as_datetime(config$run_config$forecast_start_datetime)  if(config$run_config$forecast_horizon > 16 & config$met$use_forecasted_met){   met_forecast_start_datetime <- met_forecast_start_datetime - lubridate::days(config$met$forecast_lag_days)   if(met_forecast_start_datetime < met_start_datetime){     met_start_datetime <- met_forecast_start_datetime   } }  if(is.null(config$met$use_met_s3)){   config$met$use_met_s3 <- TRUE }  met_out <- FLAREr::generate_met_files_arrow(obs_met_file = obs_met_file,                                             out_dir = config$file_path$execute_directory,                                             start_datetime = met_start_datetime,                                             end_datetime = config$run_config$end_datetime,                                             forecast_start_datetime = met_forecast_start_datetime,                                             forecast_horizon =  config$run_config$forecast_horizon,                                             site_id = config$location$site_id,                                             use_s3 = config$met$use_met_s3,                                             bucket = config$s3$drivers$bucket,                                             endpoint = config$s3$drivers$endpoint,                                             local_directory = file.path(lake_directory,config$met$local_directory),                                             use_forecast = config$met$use_forecasted_met,                                             use_ler_vars = config$met$use_ler_vars,                                             use_siteid_s3 = TRUE)  if(is.null(config$inflow$use_inflow_s3)){   config$inflow$use_inflow_s3 <- TRUE }  if(config$inflow$include_inflow){   if(config$run_config$forecast_horizon > 0){     inflow_forecast_dir <- file.path(config$inflow$forecast_inflow_model, config$location$site_id, \"0\", lubridate::as_date(config$run_config$forecast_start_datetime))   }else{     inflow_forecast_dir <- NULL   }      variables <- c(\"time\", \"FLOW\", \"TEMP\", \"SALT\")    inflow_outflow_files <- FLAREr::create_inflow_outflow_files_arrow(inflow_forecast_dir = inflow_forecast_dir,                                                                     inflow_obs = file.path(lake_directory, \"targets\",config$location$site_id, config$inflow$observed_filename),                                                                     variables = variables,                                                                     out_dir = config$file_path$execute_directory,                                                                     start_datetime = config$run_config$start_datetime,                                                                     end_datetime = config$run_config$end_datetime,                                                                     forecast_start_datetime = config$run_config$forecast_start_datetime,                                                                     forecast_horizon =  config$run_config$forecast_horizon,                                                                     site_id = config$location$site_id,                                                                     use_s3 = config$run_config$use_s3,                                                                     bucket = config$s3$inflow_drivers$bucket,                                                                     endpoint = config$s3$inflow_drivers$endpoint,                                                                     local_directory = file.path(lake_directory, config$inflow$local_directory, inflow_forecast_dir),                                                                     use_forecast = config$inflow$use_forecasted_inflow,                                                                     use_ler_vars = config$inflow$use_ler_vars)    }else{   inflow_outflow_files <- list()   inflow_outflow_files$inflow_file_name <- NULL   inflow_outflow_files$outflow_file_name <- NULL }  obs_insitu_file <- file.path(config$file_path$qaqc_data_directory, config$da_setup$obs_filename)  obs <- FLAREr::create_obs_matrix(cleaned_observations_file_long = obs_insitu_file,                                  obs_config = obs_config,                                  config)  states_config <- FLAREr::generate_states_to_obs_mapping(states_config, obs_config)  model_sd <- FLAREr::initiate_model_error(config, states_config)  init <- FLAREr::generate_initial_conditions(states_config,                                             obs_config,                                             pars_config,                                             obs,                                             config,                                             historical_met_error = met_out$historical_met_error) #Run EnKF da_forecast_output <- FLAREr::run_da_forecast(states_init = init$states,                                               pars_init = init$pars,                                               aux_states_init = init$aux_states_init,                                               obs = obs,                                               obs_sd = obs_config$obs_sd,                                               model_sd = model_sd,                                               working_directory = config$file_path$execute_directory,                                               met_file_names = met_out$filenames,                                               inflow_file_names = inflow_outflow_files$inflow_file_name,                                               outflow_file_names = inflow_outflow_files$outflow_file_name,                                               config = config,                                               pars_config = pars_config,                                               states_config = states_config,                                               obs_config = obs_config,                                               management = NULL,                                               da_method = config$da_setup$da_method,                                               par_fit_method = config$da_setup$par_fit_method,                                               debug = FALSE,                                               log_wq = FALSE,                                               obs_secchi = NULL,                                               obs_depth = NULL)  message(\"Writing netcdf\") saved_file <- FLAREr::write_forecast_netcdf(da_forecast_output = da_forecast_output,                                             forecast_output_directory = config$file_path$forecast_output_directory,                                             use_short_filename = TRUE)  message(\"Writing arrow forecast\") forecast_df <- FLAREr::write_forecast_arrow(da_forecast_output = da_forecast_output,                                             use_s3 = config$run_config$use_s3,                                             bucket = config$s3$forecasts_parquet$bucket,                                             endpoint = config$s3$forecasts_parquet$endpoint,                                             local_directory = file.path(lake_directory, \"forecasts/parquet\"))  message(\"Scoring forecasts\") if(config$output_settings$evaluate_past){   reference_datetime_format <- \"%Y-%m-%d %H:%M:%S\"   past_days <- strftime(lubridate::as_datetime(forecast_df$reference_datetime[1]) - lubridate::days(config$run_config$forecast_horizon), tz = \"UTC\")      vars <- FLAREr:::arrow_env_vars()   s3 <- arrow::s3_bucket(bucket = config$s3$forecasts_parquet$bucket, endpoint_override = config$s3$forecasts_parquet$endpoint)   past_forecasts <- arrow::open_dataset(s3) |>     dplyr::filter(model_id == forecast_df$model_id[1],                   site_id == forecast_df$site_id[1],                   reference_datetime > past_days) |>     dplyr::collect()   FLAREr:::unset_arrow_vars(vars) }else{   past_forecasts <- NULL }  combined_forecasts <- dplyr::bind_rows(forecast_df, past_forecasts)  FLAREr::generate_forecast_score_arrow(targets_file = obs_insitu_file,                                       forecast_df = combined_forecasts,                                       use_s3 = config$run_config$use_s3,                                       bucket = config$s3$scores$bucket,                                       endpoint = config$s3$scores$endpoint,                                       local_directory = file.path(lake_directory, \"scores/parquet\"),                                       variable_types = config$output_settings$variables_in_scores)  message(\"Generating plot\") FLAREr::plotting_general_2(file_name = saved_file,                            target_file = obs_insitu_file,                            ncore = 2,                            obs_csv = FALSE)  message(\"Putting forecast\") FLAREr::put_forecast(saved_file, eml_file_name = NULL, config)  message(paste0(\"successfully generated flare forecats for: \", basename(saved_file)))"},{"path":"http://flare-forecast.org/FLAREr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R. Quinn Thomas. Author, maintainer. Vahid Daneshmand. Contributor. Tadhg Moore. Contributor.","code":""},{"path":"http://flare-forecast.org/FLAREr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Thomas R (2023). FLAREr: Forecasting Lake Reservoir Ecosystems. R package version 2.2.21, http://flare-forecast.org/FLAREr/.","code":"@Manual{,   title = {FLAREr: Forecasting Lake and Reservoir Ecosystems},   author = {R. Quinn Thomas},   year = {2023},   note = {R package version 2.2.21},   url = {http://flare-forecast.org/FLAREr/}, }"},{"path":"http://flare-forecast.org/FLAREr/index.html","id":"flarer","dir":"","previous_headings":"","what":"Forecasting Lake and Reservoir Ecosystems","title":"Forecasting Lake and Reservoir Ecosystems","text":"document serves users guide tutorial FLARE (Forecasting Lake Reservoir Ecosystems) system (Thomas et al.Â 2020). FLARE generates forecasts forecast uncertainty water temperature water quality 1 35-day ahead time horizon multiple depths lake reservoir. uses data assimilation update initial starting point forecast model parameters based real-time statistical comparisons observations. developed, tested, evaluated Falling Creek Reservoir Vinton,VA (Thomas et al.Â 2020) National Ecological Observatory Network lakes (Thomas et al.Â 2023 FLAREr set R scripts Generating inputs configuration files required General Lake Model (GLM) Applying data assimilation GLM Processing archiving forecast output Visualizing forecast output FLARE uses 1-D General Lake Model (Hipsey et al.Â 2019) mechanistic process model predicts hydrodynamics lake reservoir. forecasts water quality, uses GLM Aquatic Ecosystem Dynamics library. binaries GLM GLM-AED included FLARE code available GitHub. FLARE requires GLM version 3.3 higher. information GLM can found : GLM 3.0.0 manuscript GLM GitHub GLM users guide FLARE development supported grants U.S. National Science Foundation (CNS-1737424, DBI-1933016, DBI-1933102)","code":""},{"path":"http://flare-forecast.org/FLAREr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Forecasting Lake and Reservoir Ecosystems","text":"need download necessary packages prior running.","code":"remotes::install_github(\"FLARE-forecast/FLAREr\")"},{"path":"http://flare-forecast.org/FLAREr/index.html","id":"use","dir":"","previous_headings":"","what":"Use","title":"Forecasting Lake and Reservoir Ecosystems","text":"FLAREr set functions address key steps forecasting workflow.","code":""},{"path":"http://flare-forecast.org/FLAREr/index.html","id":"requires","dir":"","previous_headings":"Use","what":"Requires","title":"Forecasting Lake and Reservoir Ecosystems","text":"User generated insitu observations, meteorology, inflow/outflow specified format. See FLARE example vignette format specification.","code":""},{"path":"http://flare-forecast.org/FLAREr/index.html","id":"quick-run","dir":"","previous_headings":"Use","what":"Quick Run","title":"Forecasting Lake and Reservoir Ecosystems","text":"code produce single forecast Falling Creek Reservoir using configuration files included package.","code":"library(arrow) library(tidyverse) library(FLAREr)  tmp <- tempdir() file.copy(system.file(\"extdata\", package = \"FLAREr\"), tmp, recursive = TRUE) lake_directory <- file.path(tmp, \"example\") run_flare(lake_directory = lake_directory,configure_run_file = \"configure_run.yml\", config_set_name = \"default\")  open_dataset(file.path(lake_directory,\"forecasts/parquet\")) |>    filter(variable == \"temperature\",          depth == 1) |>    collect() |>    ggplot(aes(x = datetime, y = prediction, group = parameter)) +   geom_line() +   geom_vline(aes(xintercept = as_datetime(reference_datetime))) +   labs(title = \"1 m water temperature forecast\")"},{"path":"http://flare-forecast.org/FLAREr/reference/check_noaa_present_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if NOAA forecasts have been downloaded and processed â check_noaa_present_arrow","title":"Check if NOAA forecasts have been downloaded and processed â check_noaa_present_arrow","text":"Check NOAA forecasts downloaded processed","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/check_noaa_present_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if NOAA forecasts have been downloaded and processed â check_noaa_present_arrow","text":"","code":"check_noaa_present_arrow(   lake_directory,   configure_run_file = \"configure_run.yml\",   config_set_name = \"default\" )"},{"path":"http://flare-forecast.org/FLAREr/reference/check_noaa_present_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if NOAA forecasts have been downloaded and processed â check_noaa_present_arrow","text":"lake_directory four letter code site configure_run_file name simulation config_set_name FLARE configuration object (needed s3 buckets endpoit)","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_inflow_outflow_files_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Generating inflow and output files in the GLM format using arrow â create_inflow_outflow_files_arrow","title":"Generating inflow and output files in the GLM format using arrow â create_inflow_outflow_files_arrow","text":"Generating inflow output files GLM format using arrow","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_inflow_outflow_files_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generating inflow and output files in the GLM format using arrow â create_inflow_outflow_files_arrow","text":"","code":"create_inflow_outflow_files_arrow(   inflow_forecast_dir = NULL,   inflow_obs,   variables = c(\"time\", \"FLOW\", \"TEMP\", \"SALT\"),   out_dir,   start_datetime,   end_datetime = NA,   forecast_start_datetime = NA,   forecast_horizon = 0,   site_id,   use_s3 = FALSE,   bucket = NULL,   endpoint = NULL,   local_directory = NULL,   use_forecast = TRUE,   use_ler_vars = FALSE )"},{"path":"http://flare-forecast.org/FLAREr/reference/create_inflow_outflow_files_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generating inflow and output files in the GLM format using arrow â create_inflow_outflow_files_arrow","text":"inflow_forecast_dir string; full directory path contains forecasted inflow outflow files inflow_obs string; full path cleaned inflow observation specified format working_directory string; full directory FLARE executes state_names vector; vector state names included inflow files","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_inflow_outflow_files_arrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generating inflow and output files in the GLM format using arrow â create_inflow_outflow_files_arrow","text":"list two vectors. One vector matrix inflow_file_names matrix outflow_file_names","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_inflow_outflow_files_arrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generating inflow and output files in the GLM format using arrow â create_inflow_outflow_files_arrow","text":"Processes historical inflow data inflow_obs files inflow_file_dir GLM format","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"Create matrix observations format required run_da_forecast","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"","code":"create_obs_matrix(cleaned_observations_file_long, obs_config, config)"},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"cleaned_observations_file_long string; file name (full path) long-format observation file obs_config list; observations configuration list config list; flare configuration list","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"matrix based generate_initial_conditions() run_da_forecast()","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"Creates matrix observations maps modeled states observed states. function uses information columns obs_config file.","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/create_obs_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create matrix of observations in the format required by run_da_forecast â create_obs_matrix","text":"","code":"if (FALSE) { obs <- create_obs_matrix(cleaned_observations_file_long, obs_config, config) }"},{"path":"http://flare-forecast.org/FLAREr/reference/delete_restart.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete restart file on s3 bucket â delete_restart","title":"Delete restart file on s3 bucket â delete_restart","text":"Delete restart file s3 bucket","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/delete_restart.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete restart file on s3 bucket â delete_restart","text":"","code":"delete_restart(site_id, sim_name, bucket = \"restart\", endpoint)"},{"path":"http://flare-forecast.org/FLAREr/reference/delete_restart.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete restart file on s3 bucket â delete_restart","text":"sim_name name simulation endpoint S3 endpoint site four letter code site","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/delete_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete simulation on s3 bucket â delete_sim","title":"Delete simulation on s3 bucket â delete_sim","text":"Delete simulation s3 bucket","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/delete_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete simulation on s3 bucket â delete_sim","text":"","code":"delete_sim(site_id, sim_name, config)"},{"path":"http://flare-forecast.org/FLAREr/reference/delete_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete simulation on s3 bucket â delete_sim","text":"site_id four letter code site sim_name name simulation config FLARE configuration object (needed s3 buckets endpoit)","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_forecast_score_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Score a forecast using score4cast package and arrow â generate_forecast_score_arrow","title":"Score a forecast using score4cast package and arrow â generate_forecast_score_arrow","text":"Score forecast using score4cast package arrow","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_forecast_score_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score a forecast using score4cast package and arrow â generate_forecast_score_arrow","text":"","code":"generate_forecast_score_arrow(   targets_file,   forecast_df,   use_s3 = FALSE,   bucket = NULL,   endpoint = NULL,   local_directory = NULL,   variable_types = \"state\" )"},{"path":"http://flare-forecast.org/FLAREr/reference/generate_forecast_score_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score a forecast using score4cast package and arrow â generate_forecast_score_arrow","text":"targets_file observation file forecast_df forecast file","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate initial conditions for FLARE â generate_initial_conditions","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"Generate initial conditions FLARE","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"","code":"generate_initial_conditions(   states_config,   obs_config,   pars_config = NULL,   obs,   config,   historical_met_error = FALSE )"},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"states_config list; list state configurations obs_config list; list observation configurations pars_config list; list parameter configurations  (Default = NULL) obs array; array observations. Required dimensions [nobs, time, depth] config list; list configurations historical_met_error boolean; producted generate_glm_met_files() restart_file string; netcdf file full path FLARE output used initial conditions","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"list; list contains initial conditions objects required run_da_forecast()","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"Function generate initial conditions either default values states_config, observations (available), previous run using output restart file.","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_initial_conditions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate initial conditions for FLARE â generate_initial_conditions","text":"","code":"if (FALSE) {   init <- generate_initial_conditions(states_config, obs_config,     pars_config, obs, config, restart_file = config$run_config$restart_file,     historical_met_error = met_out$historical_met_error)   }"},{"path":"http://flare-forecast.org/FLAREr/reference/generate_met_files_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","title":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","text":"Convert historical meteorology NOAA forecasts GLM format via arrow connection","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_met_files_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","text":"","code":"generate_met_files_arrow(   obs_met_file = NULL,   out_dir,   start_datetime,   end_datetime = NA,   forecast_start_datetime = NA,   forecast_horizon = 0,   site_id,   use_s3 = FALSE,   bucket = NULL,   endpoint = NULL,   local_directory = NULL,   use_forecast = TRUE,   use_ler_vars = FALSE,   use_siteid_s3 = FALSE )"},{"path":"http://flare-forecast.org/FLAREr/reference/generate_met_files_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","text":"obs_met_file string; full path netcdf observed historical meteorology out_dir string; full path directory converted files saved","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_met_files_arrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","text":"list; vector full path converted files boolean flag issues historical meteorology files","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_met_files_arrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","text":"Function combines historical meteorology NOAA forecasts create meteorology input files GLM format.  file generated ensemble member.","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_met_files_arrow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Convert historical meteorology and NOAA forecasts to GLM format via arrow connection â generate_met_files_arrow","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Map the states to the observations â generate_states_to_obs_mapping","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"Map states observations","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"","code":"generate_states_to_obs_mapping(states_config, obs_config)"},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"states_config list; list state configurations obs_config list; list observation configurations","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"updated states_config list","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"Convert columns map states observations single vector.  necessary states observations, multiple states can contribute observation, one observation can associated multiple states. Function must assigned states_config object","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/generate_states_to_obs_mapping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map the states to the observations â generate_states_to_obs_mapping","text":"","code":"if (FALSE) { states_config <- generate_states_to_obs_mapping(states_config, obs_config) }"},{"path":"http://flare-forecast.org/FLAREr/reference/get_driver_forecast_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file path for driver forecasts â get_driver_forecast_path","title":"Get file path for driver forecasts â get_driver_forecast_path","text":"Get file path driver forecasts","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_driver_forecast_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file path for driver forecasts â get_driver_forecast_path","text":"","code":"get_driver_forecast_path(config, forecast_model)"},{"path":"http://flare-forecast.org/FLAREr/reference/get_driver_forecast_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file path for driver forecasts â get_driver_forecast_path","text":"config flare configuration object forecast_model name forecast model (.e \"noaa/NOAAGEFS_1hr); path relative driver directory.","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_driver_forecast_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get file path for driver forecasts â get_driver_forecast_path","text":"full path driver forecast","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_edi_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download file from EDI data portal â get_edi_file","title":"Download file from EDI data portal â get_edi_file","text":"Download file EDI data portal","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_edi_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download file from EDI data portal â get_edi_file","text":"","code":"get_edi_file(edi_https, file, lake_directory)"},{"path":"http://flare-forecast.org/FLAREr/reference/get_edi_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download file from EDI data portal â get_edi_file","text":"edi_https https EDI package file name file EDI package (full path) lake_directory full path repository directory","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_git_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get data from Github repository â get_git_repo","title":"Get data from Github repository â get_git_repo","text":"Get data Github repository","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_git_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get data from Github repository â get_git_repo","text":"","code":"get_git_repo(lake_directory, directory, git_repo)"},{"path":"http://flare-forecast.org/FLAREr/reference/get_git_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get data from Github repository â get_git_repo","text":"lake_directory full path repository directory directory branch name github git_repo https github repository","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_restart_file.html","id":null,"dir":"Reference","previous_headings":"","what":"Download restart file from s3 bucket â get_restart_file","title":"Download restart file from s3 bucket â get_restart_file","text":"Download restart file s3 bucket","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_restart_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download restart file from s3 bucket â get_restart_file","text":"","code":"get_restart_file(config, lake_directory)"},{"path":"http://flare-forecast.org/FLAREr/reference/get_restart_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download restart file from s3 bucket â get_restart_file","text":"config flare configuration object lake_directory full path repository directory","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_run_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Get run configuration from s3 bucket â get_run_config","title":"Get run configuration from s3 bucket â get_run_config","text":"Get run configuration s3 bucket","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_run_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get run configuration from s3 bucket â get_run_config","text":"","code":"get_run_config(   configure_run_file = \"configure_run.yml\",   lake_directory,   config,   clean_start = FALSE,   config_set_name = \"default\",   sim_name = NA )"},{"path":"http://flare-forecast.org/FLAREr/reference/get_run_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get run configuration from s3 bucket â get_run_config","text":"configure_run_file file name (path) run configuration file lake_directory full path repository directory config flare configuration object clean_start logical; reset configuration run base file configuration directory","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Download target data from s3 â get_targets","title":"Download target data from s3 â get_targets","text":"Download target data s3","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/get_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download target data from s3 â get_targets","text":"","code":"get_targets(lake_directory, config)"},{"path":"http://flare-forecast.org/FLAREr/reference/get_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download target data from s3 â get_targets","text":"lake_directory full path repository directory config flare configuration object","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/ignore_sigpipe.html","id":null,"dir":"Reference","previous_headings":"","what":"ignore sigpipe â ignore_sigpipe","title":"ignore sigpipe â ignore_sigpipe","text":"Avoid SIGPIPE error scripts using Arrow S3","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/ignore_sigpipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ignore sigpipe â ignore_sigpipe","text":"","code":"ignore_sigpipe()"},{"path":"http://flare-forecast.org/FLAREr/reference/initiate_model_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate model error matrix from configuration files â initiate_model_error","title":"Generate model error matrix from configuration files â initiate_model_error","text":"Generate model error matrix configuration files","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/initiate_model_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate model error matrix from configuration files â initiate_model_error","text":"","code":"initiate_model_error(config, states_config)"},{"path":"http://flare-forecast.org/FLAREr/reference/initiate_model_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate model error matrix from configuration files â initiate_model_error","text":"config list; list reading configuration yaml states_config list; list reading states configuration csv","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/initiate_model_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate model error matrix from configuration files â initiate_model_error","text":"matrix","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/initiate_model_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate model error matrix from configuration files â initiate_model_error","text":"Function uses configuration files generate matrix run_da_forecast use add normally distributed random noise model predictions","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/initiate_model_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate model error matrix from configuration files â initiate_model_error","text":"","code":"if (FALSE) { model_sd <- initiate_model_error(config, states_config) }"},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"Generate diagnostic plot FLARE output observations","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"","code":"plotting_general_2(   file_name,   target_file,   ncore = 1,   plot_profile = FALSE,   obs_csv = FALSE )"},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"file_name string; full path output file produced write_forecast_netcdf() ncore integer; number computer cores parallel processing plot_profile boolean; include profile plots PDF obs_csv boolean; generate csv observed predicted values model states qaqc_data_directory string; full path processed long-format observation file","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"None","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"Function combines netcdf output long-format observation file produce set plots state variable, calibrated parameter, diagnostic variable","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/plotting_general_2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate diagnostic plot of FLARE output with observations â plotting_general_2","text":"","code":"if (FALSE) { plotting_general_2(file_name = saved_file, target_file = target_file,     ncore = config$model_settings$ncore, plot_profile = TRUE, obs_csv) }"},{"path":"http://flare-forecast.org/FLAREr/reference/put_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload forecast file and metadata to s3 bucket â put_forecast","title":"Upload forecast file and metadata to s3 bucket â put_forecast","text":"Upload forecast file metadata s3 bucket","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/put_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload forecast file and metadata to s3 bucket â put_forecast","text":"","code":"put_forecast(saved_file, eml_file_name = NULL, config)"},{"path":"http://flare-forecast.org/FLAREr/reference/put_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload forecast file and metadata to s3 bucket â put_forecast","text":"saved_file full path saved FLARE netcdf eml_file_name full path saved FLARE metadata config flare configuration object","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/put_targets.html","id":null,"dir":"Reference","previous_headings":"","what":"Save target files to s3 bucket â put_targets","title":"Save target files to s3 bucket â put_targets","text":"Save target files s3 bucket","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/put_targets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save target files to s3 bucket â put_targets","text":"","code":"put_targets(   site_id,   cleaned_insitu_file = NA,   cleaned_met_file = NA,   cleaned_inflow_file = NA,   use_s3 = FALSE,   config )"},{"path":"http://flare-forecast.org/FLAREr/reference/put_targets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save target files to s3 bucket â put_targets","text":"site_id four letter code site cleaned_insitu_file full path cleaned insitu file cleaned_met_file full path cleaned met file cleaned_inflow_file full path cleaned inflow file use_s3 logical; TRUE = use s3","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_da_forecast.html","id":null,"dir":"Reference","previous_headings":"","what":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","title":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","text":"Run ensemble data assimilation /produce forecasts","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_da_forecast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","text":"","code":"run_da_forecast(   states_init,   pars_init = NULL,   aux_states_init,   obs,   obs_sd,   model_sd,   working_directory,   met_file_names,   inflow_file_names = NULL,   outflow_file_names = NULL,   config,   pars_config = NULL,   states_config,   obs_config,   management = NULL,   da_method = \"enkf\",   par_fit_method = \"inflate\",   debug = FALSE,   log_wq = FALSE,   obs_secchi = NULL,   obs_depth = NULL )"},{"path":"http://flare-forecast.org/FLAREr/reference/run_da_forecast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","text":"states_init array initial states.  Required dimensions [states, depths, ensemble] pars_init array initial states.  Required dimensions [pars, depths, ensemble].  (Default = NULL) aux_states_init list initial conditions auxillary states.  states GLM require restarting model included data assimilation.  states associated value model_sd. obs array; array observations. Required dimensions [nobs, time, depth] obs_sd vector; vector standard deviation observation model_sd vector vector standard deviations describing model error state working_directory string; full path directory model executes met_file_names vector; vector full path meteorology file names inflow_file_names vector matrix;; vector inflow file names outflow_file_names vector matrix; vector outflow file names config list; list configurations pars_config list; list parameter configurations  (Default = NULL) states_config list; list state configurations obs_config list; list observation configurations management list; list management inputs configuration  (Default = NULL) da_method string; data assimilation method (enkf pf; Default = enkf) par_fit_method string; method adding noise parameters calibration debug boolean; add extra diagnostics debugging (Default = FALSE)","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_da_forecast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","text":"list passed write_forecast_netcdf() write netcdf output create_flare_eml() generate EML metadata","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_da_forecast.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","text":"Uses ensemble data assimilation predict water quality lake reservoir.  function requires initial conditions (states_init) state ensemble member using array following dimension order: states, depth, ensembles member.  fitting parameters, also requires initial conditions parameter ensemble member using array (par_init) following dimension order: parameters, ensemble member.  arrays states_init pars_init can created using generate_initial_conditions() function, starting initial conditions  states_config data frame observations first time column obs array.","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_da_forecast.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run ensemble data assimilation and/or produce forecasts â run_da_forecast","text":"","code":"if (FALSE) { da_forecast_output <- FLAREr::run_da_forecast(states_init = init$states,     pars_init = init$pars, aux_states_init = init$aux_states_init,     obs = obs, obs_sd = obs_config$obs_sd, model_sd = model_sd,     working_directory = config$file_path$execute_directory,     met_file_names = met_file_names, inflow_file_names = inflow_file_names,     outflow_file_names = outflow_file_names, config = config,     pars_config = pars_config, states_config = states_config,     obs_config = obs_config) }"},{"path":"http://flare-forecast.org/FLAREr/reference/run_flare.html","id":null,"dir":"Reference","previous_headings":"","what":"Run FLARE for a single forecast â run_flare","title":"Run FLARE for a single forecast â run_flare","text":"Run FLARE single forecast","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_flare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run FLARE for a single forecast â run_flare","text":"","code":"run_flare(lake_directory, configure_run_file, config_set_name)"},{"path":"http://flare-forecast.org/FLAREr/reference/run_flare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run FLARE for a single forecast â run_flare","text":"lake_directory full path repository directory configure_run_file flare configuration object config_set_name directory within configuration/workflow run configuration files","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_flare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run FLARE for a single forecast â run_flare","text":"full path save netcdf file used restart following forecast","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/run_flare.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run FLARE for a single forecast â run_flare","text":"Combines functions necessary complete execution FLARE","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/set_configuration.html","id":null,"dir":"Reference","previous_headings":"","what":"Set and create directories in the configuration file â set_configuration","title":"Set and create directories in the configuration file â set_configuration","text":"Set create directories configuration file","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/set_configuration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set and create directories in the configuration file â set_configuration","text":"","code":"set_configuration(   configure_run_file = \"configure_run.yml\",   lake_directory,   clean_start = FALSE,   config_set_name = \"default\",   sim_name = NA )"},{"path":"http://flare-forecast.org/FLAREr/reference/set_configuration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set and create directories in the configuration file â set_configuration","text":"configure_run_file name run configuration file (include full path) lake_directory full path repository directory clean_start logical: TRUE = reset run configuration file configuration directory within repository","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/update_run_config2.html","id":null,"dir":"Reference","previous_headings":"","what":"Update run configuration â update_run_config2","title":"Update run configuration â update_run_config2","text":"Update run configuration","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/update_run_config2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update run configuration â update_run_config2","text":"","code":"update_run_config2(   lake_directory,   configure_run_file = \"configure_run.yml\",   restart_file,   start_datetime,   end_datetime,   forecast_start_datetime,   forecast_horizon,   sim_name,   site_id,   configure_flare,   configure_obs,   use_s3,   bucket,   endpoint,   use_https = TRUE )"},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_arrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate parquet output file â write_forecast_arrow","title":"Generate parquet output file â write_forecast_arrow","text":"Generate parquet output file","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_arrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate parquet output file â write_forecast_arrow","text":"","code":"write_forecast_arrow(   da_forecast_output,   use_s3 = FALSE,   bucket = NULL,   endpoint = NULL,   local_directory = NULL )"},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_arrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate parquet output file â write_forecast_arrow","text":"da_forecast_output list; object returned run_da_forecast() forecast_output_directory string; full path directory csv file written use_short_filename use shortened file name; results less information file name potentially overwriting existing files","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_arrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate parquet output file â write_forecast_arrow","text":"None","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_arrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate parquet output file â write_forecast_arrow","text":"Function generates netcdf file object returned run_da_forecast()","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_arrow.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate parquet output file â write_forecast_arrow","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate netcdf output file â write_forecast_netcdf","title":"Generate netcdf output file â write_forecast_netcdf","text":"Generate netcdf output file","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate netcdf output file â write_forecast_netcdf","text":"","code":"write_forecast_netcdf(   da_forecast_output,   forecast_output_directory,   use_short_filename = TRUE )"},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate netcdf output file â write_forecast_netcdf","text":"da_forecast_output list; object returned run_da_forecast() forecast_output_directory string; full path directory netcdf file written use_short_filename use shortened file name; results less informatoin file name potentially overwriting existing files","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate netcdf output file â write_forecast_netcdf","text":"None","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate netcdf output file â write_forecast_netcdf","text":"Function generates netcdf file object returned run_da_forecast()","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate netcdf output file â write_forecast_netcdf","text":"Quinn Thomas","code":""},{"path":"http://flare-forecast.org/FLAREr/reference/write_forecast_netcdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate netcdf output file â write_forecast_netcdf","text":"","code":"if (FALSE) { write_forecast_netcdf(da_forecast_output = da_forecast_output,     forecast_output_directory = config$file_path$forecast_output_directory,     use_short_filename = TRUE) }"},{"path":"http://flare-forecast.org/FLAREr/news/index.html","id":"flarer-2221","dir":"Changelog","previous_headings":"","what":"FLAREr 2.2.21","title":"FLAREr 2.2.21","text":"Added NEWS.md file track changes package.","code":""}]
